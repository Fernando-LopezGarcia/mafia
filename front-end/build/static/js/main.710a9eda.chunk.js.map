{"version":3,"sources":["mafia.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","Tab","Container","id","defaultActiveKey","Card","Header","Nav","fill","variant","Item","Link","eventKey","Body","Content","Pane","Form","Group","controlID","Control","type","placeholder","Button","this","props","roomID","onClick","onGo","React","Component","App","state","axios","post","playername","then","response","setState","console","log","error","handleClick","className","style","width","Img","src","logo","renderBody","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,mC,8PCcrCC,E,iLAEF,OACE,kBAACC,EAAA,EAAIC,UAAL,CAAeC,GAAG,eAAeC,iBAAiB,QAChD,kBAACC,EAAA,EAAKC,OAAN,KACE,kBAACC,EAAA,EAAD,CAAKC,MAAI,EAACC,QAAQ,OAAOL,iBAAiB,QACxC,kBAACG,EAAA,EAAIG,KAAL,KACE,kBAACH,EAAA,EAAII,KAAL,CAAUC,SAAS,QAAnB,SAEF,kBAACL,EAAA,EAAIG,KAAL,KACE,kBAACH,EAAA,EAAII,KAAL,CAAUC,SAAS,UAAnB,aAIJ,kBAACP,EAAA,EAAKQ,KAAN,KACE,kBAACZ,EAAA,EAAIa,QAAL,KACE,kBAACb,EAAA,EAAIc,KAAL,CAAUH,SAAS,QACjB,kBAACI,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,gBACpB,kBAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,OAAOC,YAAY,kBACtC,kBAACL,EAAA,EAAKG,QAAN,CAAcC,KAAK,OAAOC,YAAY,wBAExC,kBAACC,EAAA,EAAD,CAAQb,QAAQ,UAAUW,KAAK,UAA/B,MAGCG,KAAKC,MAAMC,SAGhB,kBAACxB,EAAA,EAAIc,KAAL,CAAUH,SAAS,UACjB,kBAACI,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBACtB,kBAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,SAASC,YAAY,4BACtC,kBAACL,EAAA,EAAKG,QAAN,CAAcC,KAAK,OAAOC,YAAY,wBAExC,kBAACC,EAAA,EAAD,CAAQb,QAAQ,UAAUW,KAAK,SAASM,QAASH,KAAKC,MAAMG,MAA5D,MAGCJ,KAAKC,MAAMC,gB,GArCbG,IAAMC,WAkHVC,GAnEIF,IAAMC,U,YAWvB,WAAYL,GAAQ,IAAD,8BACjB,4CAAMA,KACDO,MAAQ,CACXN,OAAQ,IAHO,E,0EAQjBO,IAAMC,KAAK,+BAAgC,CAACC,WAAY,Y,oCAe3C,IAAD,OACZF,IAAMC,KAAK,+BAAgC,CAACC,WAAY,eACvDC,MAAK,SAACC,GACL,EAAKC,SAAS,CAACZ,OAAQW,IACvBE,QAAQC,IAAIH,MACX,SAACI,GACFF,QAAQC,IAAIC,Q,iCAILf,GACT,OACU,kBAAC,EAAD,CAAME,KAAMJ,KAAKkB,YAAahB,OAAQA,M,+BAQhD,OACE,yBAAKiB,UAAU,OACb,yBAAKA,UAAU,YACf,kBAACrC,EAAA,EAAD,CAAMsC,MAAO,CAAEC,MAAO,UACpB,kBAACvC,EAAA,EAAKwC,IAAN,CAAUpC,QAAQ,MAAMqC,IAAKC,MAC5BxB,KAAKyB,WAAWzB,KAAKQ,MAAL,e,GAjDTH,IAAMC,YC3DJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.710a9eda.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mafia.d7f3f346.png\";","import React, {Component} from 'react';\nimport './App.css';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Nav from 'react-bootstrap/Nav';\nimport Tab from 'react-bootstrap/Tab';\nimport Form from 'react-bootstrap/Form';\nimport logo from './mafia.png';\nimport axios from 'axios';\n\n//function handleClick() {\n//  axios.post('http://127.0.0.1:5000/create', {playername: \"Ferny\"});\n//}\n\nclass Home extends React.Component {\n  render() {\n    return (\n      <Tab.Container id=\"home-options\" defaultActiveKey=\"join\">\n        <Card.Header>\n          <Nav fill variant=\"tabs\" defaultActiveKey=\"join\">\n            <Nav.Item>\n              <Nav.Link eventKey=\"join\">Join</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"create\">Create</Nav.Link>\n            </Nav.Item>\n          </Nav>\n          </Card.Header>\n          <Card.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey=\"join\">\n                <Form>\n                  <Form.Group controlID='formJoinGame'>\n                    <Form.Control type=\"text\" placeholder=\"Enter Room ID\" />\n                    <Form.Control type=\"text\" placeholder=\"Choose Player Name\" />\n                  </Form.Group>\n                  <Button variant=\"primary\" type='submit'>\n                    Go\n                  </Button>\n                  {this.props.roomID}\n                </Form>\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"create\">\n                <Form>\n                    <Form.Group controlID='formCreateGame'>\n                    <Form.Control type=\"number\" placeholder=\"Enter Number of Players\" />\n                      <Form.Control type=\"text\" placeholder=\"Choose Player Name\" />\n                    </Form.Group>\n                    <Button variant=\"primary\" type='submit' onClick={this.props.onGo}>\n                      Go\n                    </Button>\n                    {this.props.roomID}\n                  </Form>\n              </Tab.Pane>\n            </Tab.Content>\n          </Card.Body>\n      </Tab.Container>\n    );\n  }\n}\n\nclass Room extends React.Component {\n  render() {\n    return (\n      <Card.Body>\n        <Card.Title>{this.props.roomID}</Card.Title>\n      </Card.Body>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      roomID: \"\",\n    }\n  }\n\n  handleNext() {\n    axios.post('http://127.0.0.1:5000/create', {playername: \"Ferny\"});\n  }\n/*\n  renderHome(onGo) {\n    return (\n      <Home onGo={onGo}/>\n    )\n  }\n\n  renderRoom(roomID) {\n    return (\n      <Room roomID={roomID}/>\n    )\n  }\n*/\n  handleClick() {\n    axios.post('http://127.0.0.1:5000/create', {playername: \"BigChungus\"})\n    .then((response) => {\n      this.setState({roomID: response})\n      console.log(response);\n    }, (error) => {\n      console.log(error);\n    });\n  }\n\n  renderBody(roomID) {\n    if (roomID != \"\") {\n      return (<Home onGo={this.handleClick} roomID={roomID}/>);\n    }\n    else {\n      return(<Home onGo={this.handleClick} roomID={roomID} />);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-home\">\n        <Card style={{ width: '18rem' }}>\n          <Card.Img variant=\"top\" src={logo} />\n          {this.renderBody(this.state['roomID'])}\n        </Card>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Importing the Bootstrap CSS (download and host yourself)\n//import 'bootstrap/dist/css/bootstrap.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}